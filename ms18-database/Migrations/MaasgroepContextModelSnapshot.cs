// <auto-generated />
using System;
using Maasgroep.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Maasgroep.Database.Migrations
{
    [DbContext(typeof(MaasgroepContext))]
    partial class MaasgroepContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("costCentreSeq", "receipt");

            modelBuilder.HasSequence("costCentreSeq", "receiptHistory");

            modelBuilder.HasSequence("memberSeq", "admin");

            modelBuilder.HasSequence("memberSeq", "adminHistory");

            modelBuilder.HasSequence("permissionSeq", "admin");

            modelBuilder.HasSequence("photoSeq", "receipt");

            modelBuilder.HasSequence("productSeq", "order");

            modelBuilder.HasSequence("productSeq", "orderHistory");

            modelBuilder.HasSequence("receiptSeq", "receipt");

            modelBuilder.HasSequence("receiptSeq", "receiptHistory");

            modelBuilder.HasSequence("stockSeq", "orderHistory");

            modelBuilder.Entity("Maasgroep.Database.Admin.Member", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('admin.\"memberSeq\"')");

                    b.Property<DateTime>("DateTimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateTimeDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long?>("MemberCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberDeletedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberModifiedId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MemberCreatedId");

                    b.HasIndex("MemberDeletedId");

                    b.HasIndex("MemberModifiedId");

                    b.ToTable("member", "admin");
                });

            modelBuilder.Entity("Maasgroep.Database.Admin.MemberHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('\"adminHistory\".\"memberSeq\"')");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<long?>("MemberCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberDeletedId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberModifiedId")
                        .HasColumnType("bigint");

                    b.Property<string>("MemberPermissions")
                        .IsRequired()
                        .HasMaxLength(64000)
                        .HasColumnType("character varying(64000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTime>("RecordCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("member", "adminHistory");
                });

            modelBuilder.Entity("Maasgroep.Database.Admin.MemberPermission", b =>
                {
                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateTimeDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberDeletedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberModifiedId")
                        .HasColumnType("bigint");

                    b.HasKey("MemberId", "PermissionId");

                    b.HasIndex("MemberCreatedId");

                    b.HasIndex("MemberDeletedId");

                    b.HasIndex("MemberModifiedId");

                    b.HasIndex("PermissionId");

                    b.ToTable("memberPermission", "admin");
                });

            modelBuilder.Entity("Maasgroep.Database.Admin.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('admin.\"permissionSeq\"')");

                    b.Property<DateTime>("DateTimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateTimeDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("MemberCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberDeletedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberModifiedId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("MemberCreatedId");

                    b.HasIndex("MemberDeletedId");

                    b.HasIndex("MemberModifiedId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("permission", "admin");
                });

            modelBuilder.Entity("Maasgroep.Database.Admin.TokenStore", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExperationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("MemberCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberDeletedId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberModifiedId")
                        .HasColumnType("bigint");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MemberCreatedId");

                    b.HasIndex("MemberDeletedId");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberModifiedId");

                    b.ToTable("tokenStore", "admin");
                });

            modelBuilder.Entity("Maasgroep.Database.Context.Tables.PhotoAlbum.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentAlbumId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentAlbumId", "Name")
                        .IsUnique();

                    b.ToTable("albums", "photoAlbum");
                });

            modelBuilder.Entity("Maasgroep.Database.Context.Tables.PhotoAlbum.AlbumTag", b =>
                {
                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("AlbumId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("albumTags", "photoAlbum");
                });

            modelBuilder.Entity("Maasgroep.Database.Context.Tables.PhotoAlbum.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LikedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PhotoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PhotoId");

                    b.ToTable("likes", "photoAlbum");
                });

            modelBuilder.Entity("Maasgroep.Database.Context.Tables.PhotoAlbum.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumLocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TakenOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UploaderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AlbumLocationId");

                    b.HasIndex("UploaderId");

                    b.ToTable("photos", "photoAlbum");
                });

            modelBuilder.Entity("Maasgroep.Database.Context.Tables.PhotoAlbum.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("tags", "photoAlbum");
                });

            modelBuilder.Entity("Maasgroep.Database.Orders.Bill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateTimeDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("boolean");

                    b.Property<long?>("MemberCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberDeletedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberModifiedId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Note")
                        .HasMaxLength(64000)
                        .HasColumnType("character varying(64000)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MemberCreatedId");

                    b.HasIndex("MemberDeletedId");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberModifiedId");

                    b.ToTable("bill", "order");
                });

            modelBuilder.Entity("Maasgroep.Database.Orders.Line", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<long>("BillId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateTimeDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("MemberCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberDeletedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberModifiedId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("MemberCreatedId");

                    b.HasIndex("MemberDeletedId");

                    b.HasIndex("MemberModifiedId");

                    b.HasIndex("ProductId");

                    b.ToTable("line", "order", t =>
                        {
                            t.HasCheckConstraint("CK_orderLine_quantity", "\"Quantity\" > 0");
                        });
                });

            modelBuilder.Entity("Maasgroep.Database.Orders.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('order.\"productSeq\"')");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateTimeDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("MemberCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberDeletedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberModifiedId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("PriceQuantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MemberCreatedId");

                    b.HasIndex("MemberDeletedId");

                    b.HasIndex("MemberModifiedId");

                    b.ToTable("product", "order");
                });

            modelBuilder.Entity("Maasgroep.Database.Orders.ProductHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('\"orderHistory\".\"productSeq\"')");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("MemberCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberDeletedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberModifiedId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("PriceQuantity")
                        .HasColumnType("integer");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RecordCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("product", "orderHistory");
                });

            modelBuilder.Entity("Maasgroep.Database.Orders.Stock", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateTimeDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("MemberCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberDeletedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberModifiedId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MemberCreatedId");

                    b.HasIndex("MemberDeletedId");

                    b.HasIndex("MemberModifiedId");

                    b.ToTable("stock", "order", t =>
                        {
                            t.HasCheckConstraint("CK_order_quantity", "\"Quantity\" >= 0");
                        });
                });

            modelBuilder.Entity("Maasgroep.Database.Orders.StockHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('\"orderHistory\".\"stockSeq\"')");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("MemberCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberDeletedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberModifiedId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RecordCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("stock", "orderHistory");
                });

            modelBuilder.Entity("Maasgroep.Database.Receipts.CostCentre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('receipt.\"costCentreSeq\"')");

                    b.Property<DateTime>("DateTimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateTimeDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("MemberCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberDeletedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberModifiedId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("MemberCreatedId");

                    b.HasIndex("MemberDeletedId");

                    b.HasIndex("MemberModifiedId");

                    b.ToTable("costCentre", "receipt");
                });

            modelBuilder.Entity("Maasgroep.Database.Receipts.CostCentreHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('\"receiptHistory\".\"costCentreSeq\"')");

                    b.Property<long>("CostCentreId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("MemberCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberDeletedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberModifiedId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("RecordCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("costCentre", "receiptHistory");
                });

            modelBuilder.Entity("Maasgroep.Database.Receipts.Receipt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('receipt.\"receiptSeq\"')");

                    b.Property<decimal?>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<long?>("CostCentreId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateTimeDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<long?>("MemberCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberDeletedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberModifiedId")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("ReceiptStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CostCentreId");

                    b.HasIndex("MemberCreatedId");

                    b.HasIndex("MemberDeletedId");

                    b.HasIndex("MemberModifiedId");

                    b.ToTable("receipt", "receipt", t =>
                        {
                            t.HasCheckConstraint("CK_receipt_amount", "\"Amount\" >= 0");
                        });
                });

            modelBuilder.Entity("Maasgroep.Database.Receipts.ReceiptApproval", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DateTimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateTimeDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("MemberCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberDeletedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberModifiedId")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasMaxLength(64000)
                        .HasColumnType("character varying(64000)");

                    b.Property<bool>("Paid")
                        .HasColumnType("boolean");

                    b.Property<long>("ReceiptId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MemberCreatedId");

                    b.HasIndex("MemberDeletedId");

                    b.HasIndex("MemberModifiedId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("approval", "receipt");
                });

            modelBuilder.Entity("Maasgroep.Database.Receipts.ReceiptHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('\"receiptHistory\".\"receiptSeq\"')");

                    b.Property<decimal?>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<long?>("CostCentreId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<long?>("MemberCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberDeletedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberModifiedId")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasMaxLength(64000)
                        .HasColumnType("character varying(64000)");

                    b.Property<long>("ReceiptId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReceiptStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RecordCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("receipt", "receiptHistory");
                });

            modelBuilder.Entity("Maasgroep.Database.Receipts.ReceiptPhoto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('receipt.\"photoSeq\"')");

                    b.Property<string>("Base64Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateTimeDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<long?>("MemberCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberDeletedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberModifiedId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReceiptId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MemberCreatedId");

                    b.HasIndex("MemberDeletedId");

                    b.HasIndex("MemberModifiedId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("photo", "receipt");
                });

            modelBuilder.Entity("Maasgroep.Database.Admin.Member", b =>
                {
                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberCreated")
                        .WithMany("MembersCreated")
                        .HasForeignKey("MemberCreatedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_member_memberCreated");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberDeleted")
                        .WithMany("MembersDeleted")
                        .HasForeignKey("MemberDeletedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_member_memberDeleted");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberModified")
                        .WithMany("MembersModified")
                        .HasForeignKey("MemberModifiedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_member_memberModified");

                    b.Navigation("MemberCreated");

                    b.Navigation("MemberDeleted");

                    b.Navigation("MemberModified");
                });

            modelBuilder.Entity("Maasgroep.Database.Admin.MemberPermission", b =>
                {
                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberCreated")
                        .WithMany("MemberPermissionsCreated")
                        .HasForeignKey("MemberCreatedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_memberPermission_memberCreated");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberDeleted")
                        .WithMany("MemberPermissionsDeleted")
                        .HasForeignKey("MemberDeletedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_memberPermission_memberDeleted");

                    b.HasOne("Maasgroep.Database.Admin.Member", "Member")
                        .WithMany("Permissions")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_memberPermission_member");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberModified")
                        .WithMany("MemberPermissionsModified")
                        .HasForeignKey("MemberModifiedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_memberPermission_memberModified");

                    b.HasOne("Maasgroep.Database.Admin.Permission", "Permission")
                        .WithMany("Members")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_memberPermission_permission");

                    b.Navigation("Member");

                    b.Navigation("MemberCreated");

                    b.Navigation("MemberDeleted");

                    b.Navigation("MemberModified");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Maasgroep.Database.Admin.Permission", b =>
                {
                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberCreated")
                        .WithMany("PermissionsCreated")
                        .HasForeignKey("MemberCreatedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_permission_memberCreated");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberDeleted")
                        .WithMany("PermissionsDeleted")
                        .HasForeignKey("MemberDeletedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_permission_memberDeleted");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberModified")
                        .WithMany("PermissionsModified")
                        .HasForeignKey("MemberModifiedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_permission_memberModified");

                    b.Navigation("MemberCreated");

                    b.Navigation("MemberDeleted");

                    b.Navigation("MemberModified");
                });

            modelBuilder.Entity("Maasgroep.Database.Admin.TokenStore", b =>
                {
                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberCreated")
                        .WithMany("TokenStoresCreated")
                        .HasForeignKey("MemberCreatedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_tokenStore_memberCreated");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberDeleted")
                        .WithMany("TokenStoresDeleted")
                        .HasForeignKey("MemberDeletedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_tokenStore_memberDeleted");

                    b.HasOne("Maasgroep.Database.Admin.Member", "Member")
                        .WithMany("Token")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tokenStore_member");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberModified")
                        .WithMany("TokenStoresModified")
                        .HasForeignKey("MemberModifiedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_tokenStore_memberModified");

                    b.Navigation("Member");

                    b.Navigation("MemberCreated");

                    b.Navigation("MemberDeleted");

                    b.Navigation("MemberModified");
                });

            modelBuilder.Entity("Maasgroep.Database.Context.Tables.PhotoAlbum.Album", b =>
                {
                    b.HasOne("Maasgroep.Database.Context.Tables.PhotoAlbum.Album", "ParentAlbum")
                        .WithMany("ChildAlbums")
                        .HasForeignKey("ParentAlbumId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentAlbum");
                });

            modelBuilder.Entity("Maasgroep.Database.Context.Tables.PhotoAlbum.AlbumTag", b =>
                {
                    b.HasOne("Maasgroep.Database.Context.Tables.PhotoAlbum.Album", "Album")
                        .WithMany("AlbumTags")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Maasgroep.Database.Context.Tables.PhotoAlbum.Tag", "Tag")
                        .WithMany("AlbumTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Maasgroep.Database.Context.Tables.PhotoAlbum.Like", b =>
                {
                    b.HasOne("Maasgroep.Database.Admin.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Maasgroep.Database.Context.Tables.PhotoAlbum.Photo", "Photo")
                        .WithMany("Likes")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Maasgroep.Database.Context.Tables.PhotoAlbum.Photo", b =>
                {
                    b.HasOne("Maasgroep.Database.Context.Tables.PhotoAlbum.Album", "AlbumLocation")
                        .WithMany("Photos")
                        .HasForeignKey("AlbumLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Maasgroep.Database.Admin.Member", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlbumLocation");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("Maasgroep.Database.Orders.Bill", b =>
                {
                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberCreated")
                        .WithMany("BillsCreated")
                        .HasForeignKey("MemberCreatedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_orderBill_memberCreated");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberDeleted")
                        .WithMany("BillsDeleted")
                        .HasForeignKey("MemberDeletedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_orderBill_memberDeleted");

                    b.HasOne("Maasgroep.Database.Admin.Member", null)
                        .WithMany("BillsOwned")
                        .HasForeignKey("MemberId");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberModified")
                        .WithMany("BillsModified")
                        .HasForeignKey("MemberModifiedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_orderBill_memberModified");

                    b.Navigation("MemberCreated");

                    b.Navigation("MemberDeleted");

                    b.Navigation("MemberModified");
                });

            modelBuilder.Entity("Maasgroep.Database.Orders.Line", b =>
                {
                    b.HasOne("Maasgroep.Database.Orders.Bill", "Bill")
                        .WithMany("Lines")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_orderLine_bill");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberCreated")
                        .WithMany("LinesCreated")
                        .HasForeignKey("MemberCreatedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_orderLine_memberCreated");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberDeleted")
                        .WithMany("LinesDeleted")
                        .HasForeignKey("MemberDeletedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_orderLine_memberDeleted");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberModified")
                        .WithMany("LinesModified")
                        .HasForeignKey("MemberModifiedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_orderLine_memberModified");

                    b.HasOne("Maasgroep.Database.Orders.Product", "Product")
                        .WithMany("OrderLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_orderLine_product");

                    b.Navigation("Bill");

                    b.Navigation("MemberCreated");

                    b.Navigation("MemberDeleted");

                    b.Navigation("MemberModified");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Maasgroep.Database.Orders.Product", b =>
                {
                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberCreated")
                        .WithMany("ProductsCreated")
                        .HasForeignKey("MemberCreatedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_orderProduct_memberCreated");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberDeleted")
                        .WithMany("ProductsDeleted")
                        .HasForeignKey("MemberDeletedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_orderProduct_memberDeleted");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberModified")
                        .WithMany("ProductsModified")
                        .HasForeignKey("MemberModifiedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_orderProduct_memberModified");

                    b.Navigation("MemberCreated");

                    b.Navigation("MemberDeleted");

                    b.Navigation("MemberModified");
                });

            modelBuilder.Entity("Maasgroep.Database.Orders.Stock", b =>
                {
                    b.HasOne("Maasgroep.Database.Orders.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("Maasgroep.Database.Orders.Stock", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_orderStock_product");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberCreated")
                        .WithMany("StocksCreated")
                        .HasForeignKey("MemberCreatedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_orderStock_memberCreated");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberDeleted")
                        .WithMany("StocksDeleted")
                        .HasForeignKey("MemberDeletedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_orderStock_memberDeleted");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberModified")
                        .WithMany("StocksModified")
                        .HasForeignKey("MemberModifiedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_orderStock_memberModified");

                    b.Navigation("MemberCreated");

                    b.Navigation("MemberDeleted");

                    b.Navigation("MemberModified");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Maasgroep.Database.Receipts.CostCentre", b =>
                {
                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberCreated")
                        .WithMany("CostCentresCreated")
                        .HasForeignKey("MemberCreatedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_costCentre_memberCreated");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberDeleted")
                        .WithMany("CostCentresDeleted")
                        .HasForeignKey("MemberDeletedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_costCentre_memberDeleted");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberModified")
                        .WithMany("CostCentresModified")
                        .HasForeignKey("MemberModifiedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_costCentre_memberModified");

                    b.Navigation("MemberCreated");

                    b.Navigation("MemberDeleted");

                    b.Navigation("MemberModified");
                });

            modelBuilder.Entity("Maasgroep.Database.Receipts.Receipt", b =>
                {
                    b.HasOne("Maasgroep.Database.Receipts.CostCentre", "CostCentre")
                        .WithMany("Receipt")
                        .HasForeignKey("CostCentreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_receipt_costCentre");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberCreated")
                        .WithMany("ReceiptsCreated")
                        .HasForeignKey("MemberCreatedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_receipt_memberCreated");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberDeleted")
                        .WithMany("ReceiptsDeleted")
                        .HasForeignKey("MemberDeletedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_receipt_memberDeleted");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberModified")
                        .WithMany("ReceiptsModified")
                        .HasForeignKey("MemberModifiedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_receipt_memberModified");

                    b.Navigation("CostCentre");

                    b.Navigation("MemberCreated");

                    b.Navigation("MemberDeleted");

                    b.Navigation("MemberModified");
                });

            modelBuilder.Entity("Maasgroep.Database.Receipts.ReceiptApproval", b =>
                {
                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberCreated")
                        .WithMany("ReceiptApprovalsCreated")
                        .HasForeignKey("MemberCreatedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_receiptApproval_memberCreated");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberDeleted")
                        .WithMany("ReceiptApprovalsDeleted")
                        .HasForeignKey("MemberDeletedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_receiptApproval_memberDeleted");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberModified")
                        .WithMany("ReceiptApprovalsModified")
                        .HasForeignKey("MemberModifiedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_receiptApproval_memberModified");

                    b.HasOne("Maasgroep.Database.Receipts.Receipt", "Receipt")
                        .WithMany("ReceiptApprovals")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_receiptApproval_receipt");

                    b.Navigation("MemberCreated");

                    b.Navigation("MemberDeleted");

                    b.Navigation("MemberModified");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("Maasgroep.Database.Receipts.ReceiptPhoto", b =>
                {
                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberCreated")
                        .WithMany("PhotosCreated")
                        .HasForeignKey("MemberCreatedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_photo_memberCreated");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberDeleted")
                        .WithMany("PhotosDeleted")
                        .HasForeignKey("MemberDeletedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_photo_memberDeleted");

                    b.HasOne("Maasgroep.Database.Admin.Member", "MemberModified")
                        .WithMany("PhotosModified")
                        .HasForeignKey("MemberModifiedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_photo_memberModified");

                    b.HasOne("Maasgroep.Database.Receipts.Receipt", "Receipt")
                        .WithMany("Photos")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_photo_receipt");

                    b.Navigation("MemberCreated");

                    b.Navigation("MemberDeleted");

                    b.Navigation("MemberModified");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("Maasgroep.Database.Admin.Member", b =>
                {
                    b.Navigation("BillsCreated");

                    b.Navigation("BillsDeleted");

                    b.Navigation("BillsModified");

                    b.Navigation("BillsOwned");

                    b.Navigation("CostCentresCreated");

                    b.Navigation("CostCentresDeleted");

                    b.Navigation("CostCentresModified");

                    b.Navigation("LinesCreated");

                    b.Navigation("LinesDeleted");

                    b.Navigation("LinesModified");

                    b.Navigation("MemberPermissionsCreated");

                    b.Navigation("MemberPermissionsDeleted");

                    b.Navigation("MemberPermissionsModified");

                    b.Navigation("MembersCreated");

                    b.Navigation("MembersDeleted");

                    b.Navigation("MembersModified");

                    b.Navigation("Permissions");

                    b.Navigation("PermissionsCreated");

                    b.Navigation("PermissionsDeleted");

                    b.Navigation("PermissionsModified");

                    b.Navigation("PhotosCreated");

                    b.Navigation("PhotosDeleted");

                    b.Navigation("PhotosModified");

                    b.Navigation("ProductsCreated");

                    b.Navigation("ProductsDeleted");

                    b.Navigation("ProductsModified");

                    b.Navigation("ReceiptApprovalsCreated");

                    b.Navigation("ReceiptApprovalsDeleted");

                    b.Navigation("ReceiptApprovalsModified");

                    b.Navigation("ReceiptsCreated");

                    b.Navigation("ReceiptsDeleted");

                    b.Navigation("ReceiptsModified");

                    b.Navigation("StocksCreated");

                    b.Navigation("StocksDeleted");

                    b.Navigation("StocksModified");

                    b.Navigation("Token");

                    b.Navigation("TokenStoresCreated");

                    b.Navigation("TokenStoresDeleted");

                    b.Navigation("TokenStoresModified");
                });

            modelBuilder.Entity("Maasgroep.Database.Admin.Permission", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Maasgroep.Database.Context.Tables.PhotoAlbum.Album", b =>
                {
                    b.Navigation("AlbumTags");

                    b.Navigation("ChildAlbums");

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Maasgroep.Database.Context.Tables.PhotoAlbum.Photo", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Maasgroep.Database.Context.Tables.PhotoAlbum.Tag", b =>
                {
                    b.Navigation("AlbumTags");
                });

            modelBuilder.Entity("Maasgroep.Database.Orders.Bill", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("Maasgroep.Database.Orders.Product", b =>
                {
                    b.Navigation("OrderLines");

                    b.Navigation("Stock")
                        .IsRequired();
                });

            modelBuilder.Entity("Maasgroep.Database.Receipts.CostCentre", b =>
                {
                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("Maasgroep.Database.Receipts.Receipt", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("ReceiptApprovals");
                });
#pragma warning restore 612, 618
        }
    }
}
