<h1>Gebruiker aanpassen</h1>

<div id="login-user" class="hidden">
    <p id="login-info">Hallo <span rel="name"></span>!</p>


    <form method="post" id="user-form">

        <p>Pas hier de gegevens aan van <b rel="name"></b>:</p>

        <p class="is-guest"><b>Dit is een gastaccount. Inloggen is mogelijk zonder wachtwoord.</b></p>

        <table class="data-table">
            <tr>
                <td>Naam: </td>
                <td><input type="text" name="Name" rel="name:value"></td>
            </tr>
            <tr>
                <td>Kleur:</td>
                <td><input type="text" name="Color" rel="color:value"> <div id="color" rel="color:data-color"></div></td>
            </tr>
            <tr>
                <td></td>
                <td><input type="submit" value="Gegevens opslaan" class="btn btn-primary"></td>
            </tr>
            <tr>
                <td colspan="99">
                    &nbsp;
                    <p class="not-guest"><i>Vul onderstaande alleen in als je iets wilt aanpassen:</i></p>
                    <p class="is-guest"><i>Maak deze gast volwaardig lid door hier een wachtwoord in te stellen:</i></p>
                </td>
            </tr>
            <tr>
                <td>Je huidige wachtwoord: </td>
                <td><input type="password" class="credentials-input" name="CurrentPassword"></td>
            </tr>
            <tr>
                <td>Nieuw e-mailadres: </td>
                <td><input type="text" class="credentials-input" name="NewEmail" rel="email:placeholder"></td>
            </tr>
            <tr>
                <td>Nieuw wachtwoord: </td>
                <td><input type="password" id="new-password" class="credentials-input" name="NewPassword" placeholder="••••••••••"></td>
            </tr>
            <tr>
                <td>Rechten: </td>
                <td id="user-permissions">
                    <label id="user-permission" class="hidden" style="display:block"><input type="checkbox" class="credentials-input"> <span></span></label>
                </td>
            </tr>
            <tr>
                <td></td>
                <td><input type="button" id="credentials-button" value="Gegevens opslaan" class="btn btn-primary"></td>
            </tr>
        </table>
    </form>

    <p><a href="/Ledenbeheer">Terug naar Ledenbeheer</a></p>
</div>


@section scripts {
<script>
    requireLogin(member => {
        // User session loaded
     
        showElement(document.querySelector('#login-user'));
        showOutput(member, document.querySelector('#login-info'));

        const userId = @ViewData["id"];
        const userForm = document.querySelector('#user-form');

        apiGet('User/' + userId).then(async result => {
            // Existing user loaded

            showOutput(result, userForm);
            let color = document.querySelector('#color');
            color.style.backgroundColor = color.dataset.color;
            color.style.width = '16px';
            color.style.height = '16px';
            color.style.borderRadius = '16px';
            color.style.display = 'inline-block';

            if (result.isGuest) {
                showElement(userForm.querySelectorAll('.is-guest'));
                hideElement(userForm.querySelectorAll('.not-guest'));
                userForm.querySelector('#new-password').placeholder = '';
            } else {
                hideElement(userForm.querySelectorAll('.is-guest'));
                showElement(userForm.querySelectorAll('.not-guest'));
            }

            // Load all permissions
            let permissionPage = 1;
            let permissions = [];
            let newPermissions;
            do {
                newPermissions = await apiGetInfinite('User/Permissions', null, null, null, permissionPage);
                newPermissions.forEach(c => permissions.push(c.name));
                permissionPage++;
            } while (newPermissions && newPermissions.length > 0);

            permissions.sort();

            let permissionsContainer = userForm.querySelector('#user-permissions');
            for (i in permissions) {
                // Generate permissions checkboxes

                let permission = userForm.querySelector('#user-permission').cloneNode(true);
                permission.id = permission.id + '-' + permissions[i].replace(/\W/g, '-');
                permission.querySelector('span').innerText = permissions[i];
                permission.querySelector('input').value = permissions[i];
                permission.querySelector('input').checked = result.permissions.indexOf(permissions[i]) > -1;
                if (result.id == member.id) // You can't edit your own permissions
                    permission.querySelector('input').disabled = true;
                permissionsContainer.appendChild(permission);
                showElement(permission);
            }
            userForm.querySelector('#user-permission').remove();

            userForm.querySelector('input[name="Color"]').addEventListener('change', event => {
                let color = document.querySelector('#color');
                color.dataset.color = event.target.value;
                color.style.backgroundColor = color.dataset.color;
                color.style.width = '16px';
                color.style.height = '16px';
                color.style.borderRadius = '16px';
                color.style.display = 'inline-block';
            });
        });

        userForm.addEventListener('submit', event => {
            // Submit form

            event.preventDefault();
            
            let formData = {};
            userForm.querySelectorAll('input[name]:not(.credentials-input),textarea[name]:not(.credentials-input),select[name]:not(.credentials-input)').forEach(input => {
                formData[input.name] = input.value;
                if (input.type == "number" || input.name.match(/Id$/))
                    formData[input.name] = isNaN(+formData[input.name]) ? 0 : +formData[input.name];
            });
            hideElement(userForm);

            setLoadMessage('Bezig met opslaan...');

            apiPut('User/' + userId, formData).then(result => {
                if (result)
                    window.location.href = '/Ledenbeheer';
            });
        });

        userForm.querySelector('#credentials-button').addEventListener('click', event => {
            // Submit credentials form

            event.preventDefault();
            
            let formData = {};
            userForm.querySelectorAll('input[name],textarea[name],select[name]').forEach(input => {
                formData[input.name] = input.value;
                if (input.type == "number" || input.name.match(/Id$/))
                    formData[input.name] = isNaN(+formData[input.name]) ? 0 : +formData[input.name];
            });
            hideElement(userForm);

            formData.newPermissions = null;

            console.log(userId, member.id);

            if (userId != member.id) {
                // Don't even try to submit permissions for current user

                let newPermissions = [];
                userForm.querySelectorAll('#user-permissions input[type="checkbox"]').forEach(el => {
                    if (el.checked)
                        newPermissions.push(el.value);
                });
                formData.newPermissions = newPermissions;
            }

            setLoadMessage('Bezig met opslaan...');

            apiPut('User/' + userId + '/Credentials', formData).then(result => {
                if (result)
                    window.location.href = '/Ledenbeheer';
            });
        });
    });
</script>
}