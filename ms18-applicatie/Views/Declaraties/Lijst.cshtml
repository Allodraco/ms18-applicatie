<h1>@ViewData["Title"]</h1>

<div id="login-user" class="hidden">
    <p id="login-info">Hallo <span rel="name"></span>!</p>    

    <p>Hier kan je je bonnetjes inleveren:</p>

    <p><a asp-action="Nieuw"><button class="btn btn-primary">Nieuwe declaratie</button></a></p>

    <div id="user-receipts" class="hidden">
        <p><i>Dit zijn je bestaande declaraties in de database:</i></p>

        <p>Als de status op "Concept" staat, betekent dat dat de gegevens nog niet volledig zijn.</p>
        <p>Een bon die "Afgekeurd" is kan je hier aanpassen en opnieuw indienen.</p>

        <table class="data-table">
            <tr>
                <th>Bedrag</th>
                <th>Opmerking</th>
                <th>Status</th>
                <th>Kostencentrum</th>
                <th></th>
            </tr>
            
            <tr id="user-receipts-empty" class="hidden">
                <td colspan="999">Je hebt nog geen bonnetjes ingeleverd.</td>
            </tr>
            
            <tr id="user-receipts-row" class="hidden">
                <td rel="amount::euro"></td>
                <td rel="note"></td>
                <td rel="statusString,statusId:data-status"></td>
                <td rel="costCentre.name,costCentreId:data-cost-centre"></td>
                <td class="user-actions">
                    <a rel="id:href:editUrl">Aanpassen</a>
                    <a rel="id:data-id" href="#" class="delete-link">Verwijderen</a>
                </td>
            </tr>
        </table>

        <p><a href="/Declaraties">Terug naar Declaraties</a></p>
    </div>
</div>

@section scripts {
<script>
    getUserSession().then(member => {
        // User session loaded
     
        const userId = member.id;
        showElement(document.querySelector('#login-user'));
        showOutput(member, document.querySelector('#login-info'));
        
        apiGet('User/' + userId + '/Receipt').then(receipts => {
            // Receipts data loaded

            const noReceipts = (!receipts || !receipts.length);
            const receiptsTable = document.querySelector('#user-receipts .data-table');
            if (noReceipts) {
                showElement(document.querySelector('#user-receipts-empty'));
            } else {
                hideElement(document.querySelector('#user-receipts-empty'));
            }
            for (id in receipts) {
                const receiptRow = document.querySelector('#user-receipts-row').cloneNode(true);
                receiptRow.id = 'user-receipts-' + receipts[id].id;
                showElement(receiptRow);
                showOutput(receipts[id], receiptRow);
                receiptsTable.appendChild(receiptRow);
            }
            showElement(document.querySelector('#user-receipts'));
            receiptsTable.querySelectorAll('.delete-link').forEach(deleteLink => deleteLink.addEventListener('click', event => {
                // Click Delete link

                event.preventDefault();

                if (!window.confirm('Weet je zeker dat je deze declaratie wilt verwijderen?'))
                    return;

                const deleteId = deleteLink.dataset.id;
                const receiptRow = receiptsTable.querySelector('#user-receipts-' + deleteId);
                hideElement(receiptRow.querySelector('.user-actions'));

                apiDelete('Receipt/' + deleteId).then(result => {
                    if (!result)
                        return;

                    // Receipt deleted in database, clean it up here too
                    receiptRow.remove();
                    if (receiptsTable.querySelectorAll('tr:not(.hidden)').length <= 1)
                        showElement(document.querySelector('#user-receipts-empty'));
                });
            }));
        });
    });
</script>
}